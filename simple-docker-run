#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
	echo "$version"
}

# :command.usage
simple_docker_run_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run - Script for easily creating/running/cleaning docker containers\n"
		echo

	else
		printf "simple-docker-run - Script for easily creating/running/cleaning docker containers\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run COMMAND\n"
	printf "  simple-docker-run [COMMAND] --help | -h\n"
	printf "  simple-docker-run --version | -v\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Generate bash completions\n" "completions"
	printf "  %s   Create a docker contaner\n" "create     "
	printf "  %s   Run a created docker contaner interactively\n" "run        "
	printf "  %s   Remove a created docker contaner\n" "remove     "
	printf "  %s   Uninstall this script\n" "uninstall  "
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "--version, -v"
		printf "    Show version number\n"
		echo

	fi
}

# :command.usage
simple_docker_run_completions_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run completions\n"
		echo

		printf "  Generate bash completions\n  Usage: eval \"\$(simple-docker-run completions)\"\n"
		echo

	else
		printf "simple-docker-run completions - Generate bash completions\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run completions\n"
	printf "  simple-docker-run completions --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
simple_docker_run_create_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run create - Create a docker contaner\n"
		echo

	else
		printf "simple-docker-run create - Create a docker contaner\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run create CONTAINER_NAME SOURCE_IMAGE\n"
	printf "  simple-docker-run create --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "CONTAINER_NAME"
		printf "    Name of the created container\n"
		echo

		# :argument.usage
		printf "  %s\n" "SOURCE_IMAGE"
		printf "    Base image to use\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  simple-docker-run create linux_builder debian:11\n"
		echo

	fi
}

# :command.usage
simple_docker_run_run_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run run - Run a created docker contaner interactively\n"
		echo

	else
		printf "simple-docker-run run - Run a created docker contaner interactively\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run run CONTAINER_NAME [USER]\n"
	printf "  simple-docker-run run --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "CONTAINER_NAME"
		printf "    Name of the container to run\n"
		echo

		# :argument.usage
		printf "  %s\n" "USER"
		printf "    Override default user (current user)\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  simple-docker-run run linux_builder\n"
		printf "  simple-docker-run run linux_builder root\n"
		echo

	fi
}

# :command.usage
simple_docker_run_remove_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run remove - Remove a created docker contaner\n"
		echo

	else
		printf "simple-docker-run remove - Remove a created docker contaner\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run remove CONTAINER_NAME\n"
	printf "  simple-docker-run remove --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "CONTAINER_NAME"
		printf "    Name of the container to remove\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  simple-docker-run remove linux_builder\n"
		echo

	fi
}

# :command.usage
simple_docker_run_uninstall_usage() {
	if [[ -n $long_usage ]]; then
		printf "simple-docker-run uninstall - Uninstall this script\n"
		echo

	else
		printf "simple-docker-run uninstall - Uninstall this script\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  simple-docker-run uninstall\n"
	printf "  simple-docker-run uninstall --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  simple-docker-run uninstall linux_builder\n"
		echo

	fi
}

# :command.normalize_input
normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}
# :command.inspect_args
inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

# :command.user_lib
# src/lib/get_container_image_name.sh

function get_container_image_name {
	IMAGE_NAME="${1}_image"
	CONTAINER_NAME="${1}"
}

# src/lib/script_uninstall_itself.sh

function script_uninstall_itself {
		echo "Uninstalling myself :)"
		shred -u "$SCRIPT_PATH"
}

# src/lib/send_completions.sh
send_completions() {
	echo $'# simple-docker-run completion                             -*- shell-script -*-'
	echo $''
	echo $'# This bash completions script was generated by'
	echo $'# completely (https://github.com/dannyben/completely)'
	echo $'# Modifying it manually is not recommended'
	echo $''
	echo $'_simple-docker-run_completions_filter() {'
	echo $'  local words="$1"'
	echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
	echo $'  local result=()'
	echo $''
	echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
	echo $'    echo "$words"'
	echo $'  '
	echo $'  else'
	echo $'    for word in $words; do'
	echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
	echo $'    done'
	echo $''
	echo $'    echo "${result[*]}"'
	echo $''
	echo $'  fi'
	echo $'}'
	echo $''
	echo $'_simple-docker-run_completions() {'
	echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
	echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
	echo $'  local compline="${compwords[*]}"'
	echo $''
	echo $'  case "$compline" in'
	echo $'    \'completions\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'uninstall\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'create\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'remove\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "$(docker ps -a --filter "label=simple_docker_run" --format \'{{.Names}}\' 2> /dev/null) --help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'run\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "$(docker ps -a --filter "label=simple_docker_run" --format \'{{.Names}}\' 2> /dev/null) --help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    *)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_simple-docker-run_completions_filter "--help --version -h -v completions create remove run uninstall")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'  esac'
	echo $'} &&'
	echo $'complete -F _simple-docker-run_completions simple-docker-run'
	echo $''
	echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
simple_docker_run_completions_command() {
	# src/completions_command.sh
	# Call the `send_completions` function which was added by running:
	#
	#   $ bashly add completions
	#
	# Users can now enable bash completion for this script by running:
	#
	#   $ eval "$(simple-docker-run completions)"
	#
	send_completions

}

# :command.function
simple_docker_run_create_command() {
	# src/create_command.sh

	get_container_image_name "${args[container_name]}"
	SOURCE_IMAGE="${args[source_image]}"

	# Create temporary Dockerfile
	TMP_DOCKERFILE="/tmp/simple_docker_run_$(date +%s)"
	touch "$TMP_DOCKERFILE"

	cat > "$TMP_DOCKERFILE" <<- EOF
	FROM $SOURCE_IMAGE

	# Label tells us which containers were created by this script
	LABEL simple_docker_run='true'

	RUN apt-get update
	RUN apt-get install -y git fakeroot build-essential ncurses-dev \\
			xz-utils libssl-dev bc flex libelf-dev bison gcc llvm clang curl \\
			wget vim

	RUN useradd --create-home --shell /bin/bash $CURRENT_USER
	USER $CURRENT_USER
	WORKDIR /home/$CURRENT_USER

	CMD bash -i
	EOF

	# Build docker image
	docker build -t "$IMAGE_NAME" - < "$TMP_DOCKERFILE"

	# Remove temporary Dockerfile
	rm "$TMP_DOCKERFILE"

	# Create a docker container using the built image
	CURRENT_PATH="$(pwd)"
	CURRENT_DIRECTORY="$(basename $CURRENT_PATH)"

	docker run --name $CONTAINER_NAME --tty --interactive \
			-v "$CURRENT_PATH:/home/$CURRENT_USER/$CURRENT_DIRECTORY" \
			$IMAGE_NAME

}

# :command.function
simple_docker_run_run_command() {
	# src/run_command.sh

	get_container_image_name "${args[container_name]}"
	USER="${args[user]}"

	# If a container with the given name exists, start it instead
	EXISTING_CONTAINER=$(docker ps -aqf "name=$CONTAINER_NAME")
	if [[ $EXISTING_CONTAINER ]]; then
			if [ "$( docker container inspect -f '{{.State.Running}}' $EXISTING_CONTAINER )" == "true" ]; then
					DOCKER_USER="${USER:-$CURRENT_USER}"
					echo "Attaching to an existing docker container as $DOCKER_USER"
					docker exec --user $DOCKER_USER -it $EXISTING_CONTAINER /bin/bash
			else
					echo "Starting an existing docker container"
					docker start -a -i $EXISTING_CONTAINER
			fi
	fi

}

# :command.function
simple_docker_run_remove_command() {
	# src/remove_command.sh

	get_container_image_name "${args[container_name]}"

	echo "Removing container $CONTAINER_NAME"
	docker rm "$CONTAINER_NAME"

	echo "Removing image $IMAGE_NAME"
	docker rmi "$IMAGE_NAME"

}

# :command.function
simple_docker_run_uninstall_command() {
	# src/uninstall_command.sh

	# Script will remove itself

	sed -i '/simple-docker-run completions/d' "$HOME/.bashrc"

	trap script_uninstall_itself EXIT

}

# :command.parse_requirements
parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				simple_docker_run_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		completions)
			action="completions"
			shift
			simple_docker_run_completions_parse_requirements "$@"
			shift $#
			;;

		create)
			action="create"
			shift
			simple_docker_run_create_parse_requirements "$@"
			shift $#
			;;

		run)
			action="run"
			shift
			simple_docker_run_run_parse_requirements "$@"
			shift $#
			;;

		remove)
			action="remove"
			shift
			simple_docker_run_remove_parse_requirements "$@"
			shift $#
			;;

		uninstall)
			action="uninstall"
			shift
			simple_docker_run_uninstall_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			simple_docker_run_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
simple_docker_run_completions_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				simple_docker_run_completions_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action="completions"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
simple_docker_run_create_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				simple_docker_run_create_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action="create"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['container_name']+x} ]]; then

					args['container_name']=$1
					shift
				elif [[ -z ${args['source_image']+x} ]]; then

					args['source_image']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['container_name']+x} ]]; then
		printf "missing required argument: CONTAINER_NAME\nusage: simple-docker-run create CONTAINER_NAME SOURCE_IMAGE\n" >&2
		exit 1
	fi
	if [[ -z ${args['source_image']+x} ]]; then
		printf "missing required argument: SOURCE_IMAGE\nusage: simple-docker-run create CONTAINER_NAME SOURCE_IMAGE\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
simple_docker_run_run_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				simple_docker_run_run_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action="run"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['container_name']+x} ]]; then

					args['container_name']=$1
					shift
				elif [[ -z ${args['user']+x} ]]; then

					args['user']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['container_name']+x} ]]; then
		printf "missing required argument: CONTAINER_NAME\nusage: simple-docker-run run CONTAINER_NAME [USER]\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
simple_docker_run_remove_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				simple_docker_run_remove_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action="remove"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['container_name']+x} ]]; then

					args['container_name']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['container_name']+x} ]]; then
		printf "missing required argument: CONTAINER_NAME\nusage: simple-docker-run remove CONTAINER_NAME\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
simple_docker_run_uninstall_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				simple_docker_run_uninstall_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter

	# :command.command_filter
	action="uninstall"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.initialize
initialize() {
	version="0.1.0"
	long_usage=''
	set -e

	# src/initialize.sh

	CURRENT_USER="$(whoami)"
	SCRIPT_PATH="$HOME/.local/bin/simple-docker-run"

}

# :command.run
run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"completions")
			if [[ ${args['--help']:-} ]]; then
				long_usage=yes
				simple_docker_run_completions_usage
			else
				simple_docker_run_completions_command
			fi
			;;

		"create")
			if [[ ${args['--help']:-} ]]; then
				long_usage=yes
				simple_docker_run_create_usage
			else
				simple_docker_run_create_command
			fi
			;;

		"run")
			if [[ ${args['--help']:-} ]]; then
				long_usage=yes
				simple_docker_run_run_usage
			else
				simple_docker_run_run_command
			fi
			;;

		"remove")
			if [[ ${args['--help']:-} ]]; then
				long_usage=yes
				simple_docker_run_remove_usage
			else
				simple_docker_run_remove_command
			fi
			;;

		"uninstall")
			if [[ ${args['--help']:-} ]]; then
				long_usage=yes
				simple_docker_run_uninstall_usage
			else
				simple_docker_run_uninstall_command
			fi
			;;

	esac
}

initialize
run "$@"
